/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MYNFS_H_RPCGEN
#define _MYNFS_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum my_access {
	_O_RDONLY = 0,
	_O_WRONLY = 1,
	_O_RDWR = 2,
};
typedef enum my_access my_access;

enum my_whence {
	_SEEK_SET = 0,
	_SEEK_CUR = 1,
	_SEEK_END = 2,
};
typedef enum my_whence my_whence;

struct my_open_params {
	char *path;
	my_access my_access_flag;
};
typedef struct my_open_params my_open_params;

struct my_creat_params {
	char *path;
};
typedef struct my_creat_params my_creat_params;

struct my_read_params {
	char *path;
	int offset;
	int count;
};
typedef struct my_read_params my_read_params;

struct my_write_params {
	char *path;
	int offset;
	char *buf;
	int buf_size;
};
typedef struct my_write_params my_write_params;

struct my_lseek_params {
	char *path;
	int offset;
	int offset_to_set;
	my_whence my_whence_flag;
};
typedef struct my_lseek_params my_lseek_params;

struct my_close_params {
	char *path;
};
typedef struct my_close_params my_close_params;

struct my_open_creat_results {
	int status;
	union {
		int my_errno;
		int success;
	} my_open_creat_results_u;
};
typedef struct my_open_creat_results my_open_creat_results;

struct my_read_results {
	int status;
	union {
		int my_errno;
		char *buf;
	} my_read_results_u;
};
typedef struct my_read_results my_read_results;

struct my_write_results {
	int status;
	union {
		int my_errno;
		int bytes_written;
	} my_write_results_u;
};
typedef struct my_write_results my_write_results;

struct my_lseek_results {
	int status;
	union {
		int my_errno;
		int offset_location;
	} my_lseek_results_u;
};
typedef struct my_lseek_results my_lseek_results;

struct my_close_results {
	int status;
	union {
		int my_errno;
		int success;
	} my_close_results_u;
};
typedef struct my_close_results my_close_results;

#define MY_NFS 0x20109765
#define MY_NFS_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define my_open 1
extern  my_open_creat_results * my_open_1(my_open_params *, CLIENT *);
extern  my_open_creat_results * my_open_1_svc(my_open_params *, struct svc_req *);
#define my_creat 2
extern  my_open_creat_results * my_creat_1(my_creat_params *, CLIENT *);
extern  my_open_creat_results * my_creat_1_svc(my_creat_params *, struct svc_req *);
#define my_read 3
extern  my_read_results * my_read_1(my_read_params *, CLIENT *);
extern  my_read_results * my_read_1_svc(my_read_params *, struct svc_req *);
#define my_write 4
extern  my_write_results * my_write_1(my_write_params *, CLIENT *);
extern  my_write_results * my_write_1_svc(my_write_params *, struct svc_req *);
#define my_lseek 5
extern  my_lseek_results * my_lseek_1(my_lseek_params *, CLIENT *);
extern  my_lseek_results * my_lseek_1_svc(my_lseek_params *, struct svc_req *);
#define my_close 6
extern  my_close_results * my_close_1(my_close_params *, CLIENT *);
extern  my_close_results * my_close_1_svc(my_close_params *, struct svc_req *);
extern int my_nfs_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define my_open 1
extern  my_open_creat_results * my_open_1();
extern  my_open_creat_results * my_open_1_svc();
#define my_creat 2
extern  my_open_creat_results * my_creat_1();
extern  my_open_creat_results * my_creat_1_svc();
#define my_read 3
extern  my_read_results * my_read_1();
extern  my_read_results * my_read_1_svc();
#define my_write 4
extern  my_write_results * my_write_1();
extern  my_write_results * my_write_1_svc();
#define my_lseek 5
extern  my_lseek_results * my_lseek_1();
extern  my_lseek_results * my_lseek_1_svc();
#define my_close 6
extern  my_close_results * my_close_1();
extern  my_close_results * my_close_1_svc();
extern int my_nfs_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_my_access (XDR *, my_access*);
extern  bool_t xdr_my_whence (XDR *, my_whence*);
extern  bool_t xdr_my_open_params (XDR *, my_open_params*);
extern  bool_t xdr_my_creat_params (XDR *, my_creat_params*);
extern  bool_t xdr_my_read_params (XDR *, my_read_params*);
extern  bool_t xdr_my_write_params (XDR *, my_write_params*);
extern  bool_t xdr_my_lseek_params (XDR *, my_lseek_params*);
extern  bool_t xdr_my_close_params (XDR *, my_close_params*);
extern  bool_t xdr_my_open_creat_results (XDR *, my_open_creat_results*);
extern  bool_t xdr_my_read_results (XDR *, my_read_results*);
extern  bool_t xdr_my_write_results (XDR *, my_write_results*);
extern  bool_t xdr_my_lseek_results (XDR *, my_lseek_results*);
extern  bool_t xdr_my_close_results (XDR *, my_close_results*);

#else /* K&R C */
extern bool_t xdr_my_access ();
extern bool_t xdr_my_whence ();
extern bool_t xdr_my_open_params ();
extern bool_t xdr_my_creat_params ();
extern bool_t xdr_my_read_params ();
extern bool_t xdr_my_write_params ();
extern bool_t xdr_my_lseek_params ();
extern bool_t xdr_my_close_params ();
extern bool_t xdr_my_open_creat_results ();
extern bool_t xdr_my_read_results ();
extern bool_t xdr_my_write_results ();
extern bool_t xdr_my_lseek_results ();
extern bool_t xdr_my_close_results ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MYNFS_H_RPCGEN */
